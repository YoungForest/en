<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://youngforest.github.io</id>
    <title>YoungForest&#39;s blog • Posts by &#34;microsoft&#34; tag</title>
    <link href="https://youngforest.github.io" />
    <updated>2018-06-01T14:54:08.000Z</updated>
    <category term="tech" />
    <category term="life" />
    <category term="intern" />
    <category term="kuaishou" />
    <category term="Alibaba" />
    <category term="travel" />
    <category term="ByteDance" />
    <category term="interview" />
    <category term="New Graduate" />
    <category term="C++" />
    <category term="Database" />
    <category term="Django" />
    <category term="C++11" />
    <category term="bank" />
    <category term="money" />
    <category term="Europe" />
    <category term="Hexo" />
    <category term="Competitive Programming" />
    <category term="Algorithm" />
    <category term="LeetCode" />
    <category term="Mihayo" />
    <category term="Linux" />
    <category term="atom" />
    <category term="trvalling" />
    <category term="hash" />
    <category term="unordered_map" />
    <category term="折腾" />
    <category term="codeforces" />
    <category term="contest" />
    <category term="旷视" />
    <category term="vim" />
    <category term="WeRide" />
    <category term="tex" />
    <category term="Mac" />
    <category term="Windows" />
    <category term="Ubuntu" />
    <category term="Owncloud" />
    <category term="benchmark" />
    <category term="sensetime" />
    <category term="sublime" />
    <category term="Microsoft" />
    <category term="vscode" />
    <category term="gcc" />
    <category term="git" />
    <category term="Tencent" />
    <entry>
        <id>https://youngforest.github.io/2018/06/01/suzhou-microsoft-interview/</id>
        <title>微软苏州面试</title>
        <link rel="alternate" href="https://youngforest.github.io/2018/06/01/suzhou-microsoft-interview/"/>
        <content type="html">&lt;p&gt;在@lxc师兄的内推下，我有幸可以前往 苏州微软，面试O365部门的暑期实习生。虽然最后失败了，但从这次失败的经历中，我学习到很多。&lt;br&gt;总结在此，为未来的找实习和工作做准备。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;面试环节&#34;&gt;&lt;a href=&#34;#面试环节&#34; class=&#34;headerlink&#34; title=&#34;面试环节&#34;&gt;&lt;/a&gt;面试环节&lt;/h1&gt;&lt;h2 id=&#34;一面&#34;&gt;&lt;a href=&#34;#一面&#34; class=&#34;headerlink&#34; title=&#34;一面&#34;&gt;&lt;/a&gt;一面&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;尾递归，斐波那契（不会）&lt;/li&gt;
&lt;li&gt;合并2个列表&lt;/li&gt;
&lt;li&gt;makefile 编译顺序确定&lt;/li&gt;
&lt;li&gt;memcpy的实现方式和安全问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;用尾递归优化递归斐波那契数列&#34;&gt;&lt;a href=&#34;#用尾递归优化递归斐波那契数列&#34; class=&#34;headerlink&#34; title=&#34;用尾递归优化递归斐波那契数列&#34;&gt;&lt;/a&gt;用尾递归优化递归斐波那契数列&lt;/h3&gt;&lt;p&gt;斐波那契数列大家应该都很熟悉，高中数学课本上提到的经典递归数列。&lt;br&gt;其数学定义为：&lt;br&gt;$$&lt;br&gt;f_n = \begin{cases}&lt;br&gt;f_{n-1} + f_(n-2) &amp;amp; \quad \text{if } n &amp;gt; 2 \&lt;br&gt;1 &amp;amp; \quad \text{if } n = 0, 1&lt;br&gt;\end{cases}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;根据数学递推式，很容易地可以写出递归版的斐波那契数列：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fibonacci&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;n&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; n == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; n == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; fibonacci(n-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) + fibonacci(n-&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;根据函数调用的原理，每次需要递归调用2次本函数，当参数为n时，需要的栈帧的数目为O(2^n)。&lt;br&gt;可以利用尾递归来优化这个问题。&lt;br&gt;尾递归是&lt;a href=&#34;https://en.wikipedia.org/wiki/Tail_call&#34;&gt;尾调用&lt;/a&gt;的一种递归调用形式。&lt;br&gt;我对尾递归的理解是&lt;br&gt;函数式编程中使用函数调用以实现循环的方式。&lt;br&gt;所以，首先给出内存占用为O(1)的斐波那契数列循环实现。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fibonacci&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;n&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; n == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f_n_sub_1 = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f_n_sub_2 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i = n&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; i &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        f_n_sub_1, f_n_sub_2 = f_n_sub_1 + f_n_sub_2, f_n_sub_1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        i -= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; f_n_sub_1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;从循环实现可以看出，整个循环实现需要2个变量(f_n_sub_1和f_n_sub_2)来记录中间的结果，&lt;br&gt;一个循环变量(i)以控制循环次数(即循环结束条件)。&lt;br&gt;将这些变量当作函数的参数即可得到尾递归版本的斐波那契数列实现。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fibonacci&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;n&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;func&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;n, ret1, ret2&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; n == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ret1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; func(n - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, ret2, ret1 + ret2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; func(n, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;memcpy的实现方式和安全性问题&#34;&gt;&lt;a href=&#34;#memcpy的实现方式和安全性问题&#34; class=&#34;headerlink&#34; title=&#34;memcpy的实现方式和安全性问题&#34;&gt;&lt;/a&gt;memcpy的实现方式和安全性问题&lt;/h3&gt;&lt;p&gt;也是一个字节一个字节的复制。不是我想当然的认为一整块一整块的复制，这样会更快。&lt;br&gt;回忆计算机组成原理的知识：&lt;br&gt;CPU和Memory之间由总线连接，一次（一个时钟周期）只能读取和写入一个字的数据。&lt;/p&gt;
&lt;p&gt;安全性：很不安全。&lt;br&gt;回忆操作系统的知识：进程的内存空间映射到物理内存。&lt;br&gt;直接一个一个字节从低到高地复制粘贴容易覆盖到其他指针指到的数据（破坏了其他指针的数据）甚至本身的数据。&lt;/p&gt;
&lt;p&gt;比如memcpy一个大小为200字节的指针(地址100)到地址200，会把自己的数据(200-300)的部分先覆盖掉，之后的copy就都是错的。（这是面试官给出的解释，但我后来发现，这点是不一定不成立的。因为之后我查了一些标准库中memcpy的实现，这种情况下可能会采用自后向前复制的方法防止覆盖要复制的数据。&lt;br&gt;&lt;a href=&#34;https://github.com/gcc-mirror/gcc/blob/master/libgcc/memcpy.c&#34;&gt;无保护措施的gcc&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://blog.csdn.net/laoyang360/article/details/8020409&#34;&gt;有保护措施&lt;/a&gt;&lt;br&gt;）&lt;/p&gt;
&lt;h3 id=&#34;面试官指点&#34;&gt;&lt;a href=&#34;#面试官指点&#34; class=&#34;headerlink&#34; title=&#34;面试官指点&#34;&gt;&lt;/a&gt;面试官指点&lt;/h3&gt;&lt;p&gt;面试时在Notepad里写代码，在纸上写代码，和在白板上写，&lt;br&gt;容易程度或方便程度是：&lt;br&gt;白板 &amp;gt; 纸 &amp;gt; Notepad&lt;/p&gt;
&lt;p&gt;被告知面试题目后，首先要考虑清楚初始条件和具体要求，不清楚的一定要和面试官问清楚，不要上来就写。&lt;br&gt;否则后来发现歧义，再问时就晚了。&lt;/p&gt;
&lt;h3 id=&#34;其他收获&#34;&gt;&lt;a href=&#34;#其他收获&#34; class=&#34;headerlink&#34; title=&#34;其他收获&#34;&gt;&lt;/a&gt;其他收获&lt;/h3&gt;&lt;p&gt;有时间一定要好好看看SICP，函数式编程的尾递归在其中就有讲。&lt;br&gt;面试官估计也读过。&lt;/p&gt;
&lt;h2 id=&#34;二面&#34;&gt;&lt;a href=&#34;#二面&#34; class=&#34;headerlink&#34; title=&#34;二面&#34;&gt;&lt;/a&gt;二面&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;求树的最深度&lt;/li&gt;
&lt;li&gt;最大和的链&lt;/li&gt;
&lt;li&gt;可以拐弯的最大和的链&lt;/li&gt;
&lt;li&gt;数组权重最大的重新排序（不会）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他收获-1&#34;&gt;&lt;a href=&#34;#其他收获-1&#34; class=&#34;headerlink&#34; title=&#34;其他收获&#34;&gt;&lt;/a&gt;其他收获&lt;/h3&gt;&lt;p&gt;在面试时，ACM选手有天然的优势。&lt;br&gt;该面试官本科时，可能玩过ACM，因为他说“数组权重”那道题是他上学时自己出得。&lt;/p&gt;
&lt;p&gt;p.s. 面试官说他也毕业不久。&lt;/p&gt;
&lt;h2 id=&#34;三面&#34;&gt;&lt;a href=&#34;#三面&#34; class=&#34;headerlink&#34; title=&#34;三面&#34;&gt;&lt;/a&gt;三面&lt;/h2&gt;&lt;p&gt;周二去苏州参加完面试后，周五出结果，约了第二周周二的视频面试。&lt;br&gt;说实话，视频面试前我还真有点紧张，而且由于学校出了点状况，上午才知道下午有视频面试。&lt;br&gt;仓促之前，也没有午睡，休息好。面试之前特别困。&lt;br&gt;好在真正到面试时，肾上腺素上升，不困了。&lt;/p&gt;
&lt;p&gt;三面的面试官也很nice。&lt;br&gt;听说我熟悉SQL，就出了一道SQL题目给我。&lt;/p&gt;
&lt;p&gt;类似教务管理系统。有3张表：学生（学号，姓名），课程表（课程ID，课程名），选课表（学号，课程ID，成绩）。&lt;br&gt;查询每个学生的数学成绩和语文成绩，结果为（姓名，数学成绩，语文成绩）。&lt;br&gt;刚开始假设每个学生都选了数学和语文，后来取消了这个假设（考察outer join）。&lt;/p&gt;
&lt;h2 id=&#34;第二道题&#34;&gt;&lt;a href=&#34;#第二道题&#34; class=&#34;headerlink&#34; title=&#34;第二道题&#34;&gt;&lt;/a&gt;第二道题&lt;/h2&gt;&lt;p&gt;第二道题目考察&lt;a href=&#34;https://en.wikipedia.org/wiki/IEEE_754#Rounding_rules&#34;&gt;IEEE的一种round实现&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;首先，列出一些数字，让我观察规律。&lt;br&gt;在面试官的引导下，我猜测出来了：四舍六入五看下一位。&lt;br&gt;之后使用C语言实现这一ieee_round。&lt;/p&gt;
&lt;h2 id=&#34;结果&#34;&gt;&lt;a href=&#34;#结果&#34; class=&#34;headerlink&#34; title=&#34;结果&#34;&gt;&lt;/a&gt;结果&lt;/h2&gt;&lt;p&gt;No Hire.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很遗憾，Lead面试官最后给的是No Hire。他认为你编写代码能力不稳固。你的优点是思考能力很强，缺点是不善于展现和询问，不能从错误中获取新的解决办法，今后需要加强这方面。&lt;/p&gt;
&lt;p&gt;希望你研究生期间继续努力，欢迎再加入苏州微软。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lead面试官的眼光还是蛮准的，给出的建议的是一针见血的。我会继续努力，早日达到微软爸爸的要求的。&lt;/p&gt;
&lt;p&gt;除此之外，一开始说好的报销火车票最后也没给报，经济上还损失了1200￥。&lt;/p&gt;
</content>
        <category term="intern" />
        <category term="Microsoft" />
        <updated>2018-06-01T14:54:08.000Z</updated>
    </entry>
</feed>
