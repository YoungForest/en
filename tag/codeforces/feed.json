{
    "version": "https://jsonfeed.org/version/1",
    "title": "YoungForest's blog • All posts by \"codeforces\" tag",
    "description": "佛系更新；生活、学习",
    "home_page_url": "https://youngforest.github.io",
    "items": [
        {
            "id": "https://youngforest.github.io/2020/04/12/codeforces-round-633-Div2/",
            "url": "https://youngforest.github.io/2020/04/12/codeforces-round-633-Div2/",
            "title": "codeforces round 633 Div2",
            "date_published": "2020-04-12T14:06:55.000Z",
            "content_html": "<p><a href=\"https://codeforces.com/blog/entry/75913\">官方题解</a></p>\n<p>codeforces上题目一般高于平时的面试题。如果是为了面试的话，只刷LeetCode就可以了。不过如果是对算法和竞赛感兴趣，强烈鼓励试一试。题目的数量和质量都远超LeetCode。而且为不同水平的同学有不同的赛道，题目难度也不同。对于高水平玩家来说，竞赛体验会好的多。</p>\n<p>我目前共参加过2场Div.2，rating 1480。没错，初始值是1500，我反而掉下来了。</p>\n<h2 id=\"A-Filling-Diamonds\"><a href=\"#A-Filling-Diamonds\" class=\"headerlink\" title=\"A. Filling Diamonds\"></a>A. Filling Diamonds</h2><p>可以用动态规划的方式思考这个问题。对于长度为n的belt来说，共有2种状态：</p>\n<p>0.<br><br>/</p>\n<p>和<br>1.<br>/<br>\\</p>\n<p>状态转移方程有:<br>dp[n][0] = dp[n-1][1] + dp[n-1][0],<br>dp[n][1] = dp[n-1][1].</p>\n<p>对于初始值有:<br>dp[0][1] = 1,<br>dp[0][0] = 0.</p>\n<p>答案为: dp[n][0].</p>\n<p>通过该方程可以很快地得出<code>dp[n][0] = n</code>。</p>\n<p>时间复杂度: O(1),<br>空间复杂度: O(1).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">        cin &gt;&gt; n;</span><br><span class=\"line\">        cout &lt;&lt; n &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>出题人也很骄傲地说，这是目前最简单的Div.2 A了。代码很简单，但是思路还挺巧妙。</p>\n<h2 id=\"B-Sorted-Adjacent-Differences\"><a href=\"#B-Sorted-Adjacent-Differences\" class=\"headerlink\" title=\"B. Sorted Adjacent Differences\"></a>B. Sorted Adjacent Differences</h2><p>贪心。先排序，从中间开始选，向右跳一下，向左跳一下。</p>\n<p>时间复杂度: O(n log n),<br>空间复杂度: O(n).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> SIZE = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(SIZE)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">        cin &gt;&gt; n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            cin &gt;&gt; a[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(a.<span class=\"built_in\">begin</span>(), a.<span class=\"built_in\">begin</span>() + n);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> current = (n - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = current, right = current;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> direction = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current &gt;= <span class=\"number\">0</span> &amp;&amp; current &lt; n) &#123;</span><br><span class=\"line\">            cout &lt;&lt; a[current] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (direction) &#123;</span><br><span class=\"line\">                ++right;</span><br><span class=\"line\">                current = right;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                --left;</span><br><span class=\"line\">                current = left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            direction = !direction;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C-Powered-Addition\"><a href=\"#C-Powered-Addition\" class=\"headerlink\" title=\"C. Powered Addition\"></a>C. Powered Addition</h2><p>问题可以转化为: 可以给数组中的任何数 加 最多 2^k - 1. 使得整个数组非递减。求最小的k.</p>\n<p>时间复杂度: O(N),<br>空间复杂度: O(N).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">        cin &gt;&gt; n;</span><br><span class=\"line\">        ll max_value_in_array = numeric_limits&lt;ll&gt;::<span class=\"built_in\">min</span>();</span><br><span class=\"line\">        ll max_demand = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            ll current;</span><br><span class=\"line\">            cin &gt;&gt; current;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current &gt; max_value_in_array) &#123;</span><br><span class=\"line\">                max_value_in_array = current;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                max_demand = <span class=\"built_in\">max</span>(max_demand, max_value_in_array - current);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ll could_present = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (could_present &lt;= max_demand) &#123;</span><br><span class=\"line\">            ++ans;</span><br><span class=\"line\">            could_present *= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "codeforces",
                "contest"
            ]
        }
    ]
}