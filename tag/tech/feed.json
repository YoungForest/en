{
    "version": "https://jsonfeed.org/version/1",
    "title": "YoungForest's blog • All posts by \"tech\" tag",
    "description": "佛系更新；生活、学习",
    "home_page_url": "https://youngforest.github.io",
    "items": [
        {
            "id": "https://youngforest.github.io/2021/03/26/SSH-proxy-by-jump-server/",
            "url": "https://youngforest.github.io/2021/03/26/SSH-proxy-by-jump-server/",
            "title": "SSH 通过跳板机登陆服务器",
            "date_published": "2021-03-26T07:11:02.000Z",
            "content_html": "<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>接上篇<a href=\"https://youngforest.github.io/2021/03/18/Ubuntu-vpn-cannot-access-public-resource/\">解决台式机Ubuntu VPN访问公网资源</a>的问题后，我尝试了配置跳板机访问杭研院机器。</p>\n<p>在科研工作中，MAC笔记本无法连接OpenVPN，从而访问杭研院机器。我的台式机Ubuntu已经配置好了VPN，可以访问服务器。我现在想通过台式机Ubuntu中转，从而实现MAC“直接”访问杭研院。抽象一下问题为：</p>\n<ul>\n<li>A可以访问B</li>\n<li>A不可以访问C</li>\n<li>B可以访问C</li>\n<li>我现在想A访问C</li>\n</ul>\n<p>由于工作中主要使用SSH，因此，问题简化成A通过SSH直接登陆C。<br>我经过不屑的网上搜索和尝试，总结了2中技术和方法实现我的目的。</p>\n<ul>\n<li>SSH 代理</li>\n<li>SSH 隧道</li>\n</ul>\n<span id=\"more\"></span>\n\n\n<h2 id=\"SSH-代理\"><a href=\"#SSH-代理\" class=\"headerlink\" title=\"SSH 代理\"></a>SSH 代理</h2><p>这种方法最简单，不需要在B上进行任何操作，无缝连接C。</p>\n<p>A上执行，其中<code>rentao@10.134.150.154</code>是B，<code>ldmc@192.168.131.181</code>是C。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -o <span class=\"string\">&quot;ProxyJump rentao@10.134.150.154&quot;</span> ldmc@192.168.131.181</span><br></pre></td></tr></table></figure>\n\n<p>Reference: <a href=\"https://www.xiebruce.top/650.html\">穿越跳板机</a></p>\n<h2 id=\"SSH-隧道\"><a href=\"#SSH-隧道\" class=\"headerlink\" title=\"SSH 隧道\"></a>SSH 隧道</h2><p>B上执行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -f -N -L 0.0.0.0:9906:192.168.131.181:22 ldmc@192.168.131.181</span><br></pre></td></tr></table></figure>\n\n<p>A上执行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -p 9906 ldmc@10.134.150.154</span><br></pre></td></tr></table></figure>\n\n<p>虽然这种方法看起来更麻烦些，需要A B协作。但是相比第一种方法，其实更加灵活。可以通过SSH 隧道的方式通过B中转暴露更多C的服务（如观察训练数据的tensorboard HTTP服务也是我常需要暴露的），并不一定是SSH登陆。</p>\n<p>Reference: <a href=\"https://www.zsythink.net/archives/2450\">SSH 端口转发：SSH 隧道</a></p>\n",
            "tags": [
                "tech"
            ]
        },
        {
            "id": "https://youngforest.github.io/2018/11/05/baidu-cloud-download-speed-hack/",
            "url": "https://youngforest.github.io/2018/11/05/baidu-cloud-download-speed-hack/",
            "title": "突破百度云限速",
            "date_published": "2018-11-05T08:44:00.000Z",
            "content_html": "<p>最近因为英语学习的需要，经常到百度云上下载一些大文件。众所周知，百度云对下载进行了限速，不开他家的会员的话，下载速度只有几十k/s。实在不能忍，遂搜索了限速破解工具，下载速度达到了15M/s，哈哈。在此分享给大家。<br>不过需要注意的是，由于百度云也会更新限速机制，防止大家滥用。所以如果本文的方法失效的话，也不足为奇，还可以在网上寻找其他更新的方法。要相信广大程序员的力量。<br>截止至2018年11月5日，此方法是可行的。</p>\n<span id=\"more\"></span>\n\n<p><a href=\"https://github.com/gxvv/ex-baiduyunpan\">获取百度云 原始连接</a></p>\n<p>运行脚本后，百度云的下载界面会变成这个样子。</p>\n<p><img src=\"/images/ex-baiduyun.jpg\" alt=\"Ex-百度云脚本结果\"></p>\n<p>至于为什么点压缩连接呢？因为我发现用”复制链接“并不能获取文件本身的下载地址；而且下载压缩包也更快。</p>\n<p><a href=\"https://github.com/proxyee-down-org/proxyee-down\">http 多线程下载工具</a></p>\n<p><img src=\"/images/proxyee-down.png\" alt=\"下载工具效果\"></p>\n",
            "tags": [
                "tech"
            ]
        },
        {
            "id": "https://youngforest.github.io/2018/07/03/recommender-systems-of-popular-apps/",
            "url": "https://youngforest.github.io/2018/07/03/recommender-systems-of-popular-apps/",
            "title": "论推荐系统如何改造和奴役你的思维",
            "date_published": "2018-07-03T14:55:55.000Z",
            "content_html": "<p>应园子的邀请，我撰写了一篇关于现今流行的内容app的推荐系统的研究与讨论的文章。<br>事情的起因是这样：<br>园子同学是知乎的重度用户，曾经有一段时间每天画在刷知乎的时间超过1个小时，其三观深受知乎的影响。<br>我提醒她：</p>\n<pre><code>不是知乎主动改造你的三观；\n而是根据知乎的推荐，你越刷只会加深自己的固有倾向。\n比如，你是一个比较右的人，推荐系统最后推的都是你愿意点进去看的。\n增加用户花在产品上的时间是推荐系统的目标，而不是解决用户的问题￼。这样想想是不是挺可怕的\n这样的推荐系统就会导致，你最后只会看到你自己想看的东西。\n</code></pre>\n<p>园子顿时对推荐系统产生了浓厚的兴趣，并“报复”我：</p>\n<pre><code>要不我给你布置个任务吧：正好你最近在研究推荐系统，要不你查查资料，看看目前各大内容APP的推荐系统都是怎么做的，有哪些思路，整理成一篇文章怎么样￼￼\n</code></pre>\n<span id=\"more\"></span>\n\n<p>促使我整理2个月来的实习经验，以及查阅大量公开的资料。<br>最后总结成为这篇对各大内容APP的推荐系统的研究文章。<br>本文的目标群众是每天与推荐系统打交道（使用各大内容APP）但又对推荐系统一无所知的同学。</p>\n<p>首先，根据app下载量和对园子的影响力，我认为各大内容APP有：</p>\n<ul>\n<li>知乎</li>\n<li>网易云音乐</li>\n<li>快手</li>\n<li>淘宝</li>\n</ul>\n<p>本文还用了很多来自：Netflix, Amazon, Google News, Facebook 这些国外大厂的例子对推荐系统加以说明，因为这些app虽然国内的同学不熟悉，但在推荐系统业内属于引领者。</p>\n<h2 id=\"推荐系统的2大类\"><a href=\"#推荐系统的2大类\" class=\"headerlink\" title=\"推荐系统的2大类\"></a>推荐系统的2大类</h2><h3 id=\"基于内容的过滤\"><a href=\"#基于内容的过滤\" class=\"headerlink\" title=\"基于内容的过滤\"></a>基于内容的过滤</h3><p>此种过滤只依赖于item的数据。<br>在一个推荐系统中，被推荐和消费的就是item。如：在今日头条这样的新闻客户端中，一条新闻就是一个item，知乎 -&gt; 一个回答, 网易云音乐 -&gt; 一首歌，快手 -&gt; 一个短视频，淘宝 -&gt; 一个商品。<br>根据用户填的问卷信息（针对新用户。一般新用户进入一个应用时，都会选择一些自己的兴趣），或者根据用户的评分（针对老用户。老用户会产生很多评分，或其他action，体现出其兴趣），我们发现他对民谣感兴趣，我们就继续给他推荐其它他未消费过的民谣类歌曲。<br>这里的民谣只是一个tag，表示歌曲的类型，除此之外可能还有歌手名等tag可以利用。</p>\n<h3 id=\"协同过滤\"><a href=\"#协同过滤\" class=\"headerlink\" title=\"协同过滤\"></a>协同过滤</h3><p>此种过滤依赖于其他用户的数据。<br>协同过滤基于这样的假设：与你类似的用户喜欢的东西，可能你也会喜欢。<br>这就跟你朋友推荐给你的东西与一个陌生人推荐给你的东西相比，更可能符合你的胃口。因为你的朋友在一定程度上是与你相像的，拥有一些共同的标签。而且根据心理学的研究，人们也倾向于与与自己更像的人交朋友。<br>协同过滤的原理简而言之就是，找到一群和你相像的用户，把他们喜欢或消费过的item推荐给你。<br>“相像”的定义有许多，一般会综合考虑用户的基础信息和行为信息。<br>比如：<br>如果你的基础信息中有“年龄24岁，女人”，Netflix会把24岁的女人看的多的片子也推给你。<br>行为信息在Amazon上的体现就是：“你买了A，大部分买了A的用户，同样也买了B，你要不要买B”。</p>\n<p>在拥有大量用户的情况下，协同过滤的效果是要好于基于内容过滤的。<br>其原因可以归咎为：用户自己也不能很确切地定义自己喜欢什么，然而身体是诚实的。这也说成是大数据会比你更了解你。<br>而且在协同过滤的帮助下，app在你的调教下会越用越好用，越用越舒心，你花在其上的时间也越来越多。<br>这对老用户的粘性是非常强的。不过反过来说，当你一段时间不使用该app后，你会发现其推荐的内容就不像之前那样符合你的口味了。</p>\n<p>当然基于内容的过滤也是很有用。尤其是当一个新用户刚刚登录，还未产生很多动作和基础信息来找到和他相像的人的时候。<br>吸引新用户是十分重要的，特别是在一个app快速成长的时期。<br>相对应的，业内会有1日留存率，3日留存率，7日留存率还表示推荐系统对新用户的吸引程度。</p>\n<h2 id=\"各大内容app使用的推荐系统\"><a href=\"#各大内容app使用的推荐系统\" class=\"headerlink\" title=\"各大内容app使用的推荐系统\"></a>各大内容app使用的推荐系统</h2><p>各个厂用的主要推荐算法基本都属于协同过滤的那一大类，由于应用场景的不尽相同（新闻、商品、音乐、电影），使用的算法也不一样。<br>为了实现冷启动（新用户刚使用时获得比较好的推荐效果），各个厂也会使用基于内容的过滤和基于规则的推荐。<br>由于推荐系统都是基于内容的公司的核心竞争力，完全公开的是没有的。<br>而且据一位业界专家所说，每个厂使用的推荐算法基本相同，都是公开的那些；不一样的只是参数、数据和规则；最后推荐的结果也趋于一致。<br>我们只能在不同的应用场景下进行一些猜测，比如，在内容为音乐的网易云音乐会使用什么样的推荐算法。</p>\n<h3 id=\"知乎\"><a href=\"#知乎\" class=\"headerlink\" title=\"知乎\"></a>知乎</h3><p>知乎的内容以文字为主，现在还加入了很多视频的内容。<br>作为一个“高素质”人群的问答社区，知乎问题的分类和描述都比较清晰，这有利于更好的推荐。<br>分析知乎在推荐页给我的推荐内容，知乎的推荐以回答为主，之外还有少量的live和广告。<br>由于我对live了解不多，这里主要猜测一下“回答”的推荐过程。<br>最开始知乎的首页是 推荐 和 关注 放在一起的，现在分开了，又加了热门这一页面。<br>通过推荐页的提示“关注话题获取精准内容推荐”，可以看出，推荐页的内容主要依据的是你关注的话题。这相当于是基于内容过滤的场景。<br>从结果来看，向我推荐的回答大多是我显式选择的关注话题或者是于此相关的话题（如下图2所示：话题之间有父子、相关等关系），</p>\n<p><img src=\"/assets/zhihu-recommend-page.jpg\" alt=\"推荐页\"></p>\n<p><img src=\"/assets/zhihu-topic-page.jpg\" alt=\"相关话题页\"></p>\n<h3 id=\"网易云音乐\"><a href=\"#网易云音乐\" class=\"headerlink\" title=\"网易云音乐\"></a>网易云音乐</h3><p>网易云音乐的推荐可以分为3个板块：私人FM，每日推荐，推荐歌单。</p>\n<p><img src=\"/assets/netease-music-homepage.jpg\" alt=\"网易云音乐推荐模块\"></p>\n<p>私人FM有3个主要操作：</p>\n<ul>\n<li>喜欢</li>\n<li>删除</li>\n<li>跳过</li>\n</ul>\n<p>除此之外还有一些其他的隐式操作，如 完整听完一首歌曲，调节进度条，看评论时长等可以利用。<br>我们可以将这些行为分为2大类：喜欢和不喜欢。<br>根据程度不同，可以赋给不同操作不同的喜欢值。<br>如显式地点击喜欢和完整地听完这首歌都代表喜欢，不过前者更强一点，可以赋给更高的喜欢值。<br>用户对播放的歌曲产生的所有操作最后求和可以得到用户对这首歌的喜欢程度。<br>用户在听过一段时间私人FM之后，会产生一系列的操作。<br>我们就可以得到用户听过的所有的歌曲的喜欢程度。<br>利用这些信息，再通过协同过滤的一些经典算法，就可以向用户推荐他没有听过的歌曲了。<br>所以说，私人FM听的越多，推荐效果会越好。</p>\n<p>每日推荐一般会与你最近听过的歌曲有关。也就是说，歌曲的兴趣对今天推荐的影响随时间衰减比较快。<br>比如，你昨天听了电音，比较喜欢，接连听了几首，可能还“喜欢”了一些。今天的每日推荐就会推更多的电音给你。</p>\n<p>推荐歌单算是比较容易推荐的一个板块。因为歌单都是专家或是爱好者组建的，将很多歌曲按照某一标准归为一类。每个歌单还都有自己的标签可以利用。如摇滚、英伦、另类、独立。这些标签都是区分性很强的。<br>在向我推荐的歌单里，一般包含几首我“喜爱”的歌曲。由此可见，推荐歌单使用了“我喜欢的音乐”中的信息。如果几首你喜欢的音乐同时出现在一个歌单中，那么很大程度上可以预测，这个歌单中的其他音乐也会被你喜欢。</p>\n<h3 id=\"快手\"><a href=\"#快手\" class=\"headerlink\" title=\"快手\"></a>快手</h3><p>快手作为一个短视频平台，每天用户会产生大量的视频。视频相对而言是不那么好推荐的，因为</p>\n<ul>\n<li>视频内的语义现在用机器理解还是很困难的</li>\n<li>被推荐的内容几乎都是冷启动的，也就是说要争取推荐最新上传的视频</li>\n</ul>\n<p>在这种情况下，快手可能使用了标签这一信息作为推荐的主要依据。<br>用户上传的视频可以被用户自己打上各种标签：社会摇，炫技，教程，小吃等。<br>依靠这些标签把用户和视频聚成不同的类。这样新上传的视频就可以利用用户在老视频上产生的操作了。</p>\n<h3 id=\"淘宝\"><a href=\"#淘宝\" class=\"headerlink\" title=\"淘宝\"></a>淘宝</h3><p>淘宝作为一个c2c的电商平台，推荐系统的指标与其他b2c电商（如 亚马逊）有所不同。<br>评价一个推荐系统好坏的指标中有一个是对冷门产品的发掘能力，即对<a href=\"https://baike.baidu.com/item/%E9%95%BF%E5%B0%BE%E6%95%88%E5%BA%94\">长尾</a>的尾端进行推荐。<br>使用推荐系统将冷门产品的商家和顾客联系起来是淘宝的一个卖点，因为淘宝上的商品实在太多了。没有你买不到，只有你想不到。<br>根据亚马逊公开的一些信息，电商系统的推荐系统核心可以用一句话概括：买了商品A的人，同样也买了B，你买B呀？</p>\n<h2 id=\"为什么说推荐系统在改造和奴役你的思维\"><a href=\"#为什么说推荐系统在改造和奴役你的思维\" class=\"headerlink\" title=\"为什么说推荐系统在改造和奴役你的思维\"></a>为什么说推荐系统在改造和奴役你的思维</h2><p>对于一个内容app的推荐系统来说，推荐好不好的指标最后都会反应在用户停留在该app上的时间。<br>在互联网上网人数趋于饱和的情况下，整个市场用户时间数不会像之前那样快速增长，如何抢夺用户宝贵的时间就成个各个内容推荐系统的目标。<br>为了让你停留在本应用的时间增加，各大内容app可谓用心良苦。<br>如知乎现在移动端网站会向app内导流。之前即使用户不登陆、在移动端网页上也可以享受到所有的信息。<br>现在在移动端网页上只能看到一个回答的开始部分，想要浏览完整部分就不许下载并进入知乎的app才可以。<br>很大程度上降低了用户体验。比如我的朋友经常会分享一些知乎上的回答或问题给我，我必须点击多次用app打开才能看到完整信息，很是不爽。<br>今日头条之前也因为三俗内容被政府多次约谈。就是因为相比其他的新闻，低俗、色情的东西更容易吸引网民们的眼球。<br>就像本文最开始谈到的那样，推荐系统为了增加用户停留的时间。只会一味地迎合用户的喜好，无论用户的喜好是否正确。<br>整个过程就是一个正反馈。你思想比较右，推荐系统会推符合你口味的内容，加深你的兴趣。<br>对一个成年人来说，还有甄别内容和选择平台的能力。<br>对于广大的未成年人，无疑会是一种误导。再加上现在互联网内容的监管并不是很完善。为了利益，推荐系统推给未成年人的不会是正能量，只会是娱乐导向、甚至低俗的内容。这对未成年人的思想塑造会有很不好的影响。</p>\n<p>其实很多成年人又成熟多少呢？想想你被推荐的内容，想想你花在这些内容app上的时间。<br>在此引用一句古话：“良药苦口利于病，忠言逆耳利于行”。然而作为推荐系统，只会给你说好听的，你喜欢听的。<br>在潜移默化之中，你的思想已经被推荐系统所改造和奴役了。</p>\n<p>依赖于推荐系统的内容也是一种懒惰的表现。相比 主动去获取信息，直接接受推荐系统的内容 要容易、愉快的多。但要记住，懒惰是有代价的，你的思想将不可避免地变得狭隘。</p>\n<h2 id=\"如何避免推荐系统的恶果\"><a href=\"#如何避免推荐系统的恶果\" class=\"headerlink\" title=\"如何避免推荐系统的恶果\"></a>如何避免推荐系统的恶果</h2><h3 id=\"多读书\"><a href=\"#多读书\" class=\"headerlink\" title=\"多读书\"></a>多读书</h3><p>无论知乎给你怎样的错觉，书本上的内容在质量上还是高的多。<br>我最近读了一本斌卡的《一平米健身》，相比知乎上的健身类回答，内容的质量要高的多。<br>毕竟相比在网络上写个回答来说，出书的门槛和花费的精力要多的多。<br>尤其是，书本上还承载着互联网之前人们的原创思想。这是知乎上所没有的。当然，经过不断搬运，许多”知乎er”把书本上的知识运用在回答中。不过这些都是经过加工和断章取义的，也有不少从某本书上搬一段话就获得高赞的案例。</p>\n<h3 id=\"与优秀的人交朋友\"><a href=\"#与优秀的人交朋友\" class=\"headerlink\" title=\"与优秀的人交朋友\"></a>与优秀的人交朋友</h3><p>与优秀的人交朋友，聊天，比起把时间花在追随大v的言论要有用的多。<br>我总认为，一个人在互联网上呈现给你的是他想给你看的部分，不完全。<br>相比之下，虽然面对面的交流也通常是会掩盖本性的，但这种信息交互是双向的，而非通过follow关系的单向信息输出。<br>而且，不知道大家有没有这样的感觉。与优秀的人交流时，自己会花更多的精力去思考，而非听完就完事儿了。在知乎这些平台上，看完之后的热度保持的并不长久。</p>\n<h3 id=\"接触不同的内容，才能够塑造一个完整的三观\"><a href=\"#接触不同的内容，才能够塑造一个完整的三观\" class=\"headerlink\" title=\"接触不同的内容，才能够塑造一个完整的三观\"></a>接触不同的内容，才能够塑造一个完整的三观</h3><p>不要只看自己喜欢的，也要听取不同的声音。党同伐异是人类的天性。如果你不刻意去避免这一人性上的缺点的话，推荐系统会像一个谄媚的奸臣一样，只说你想听的，而你可能就会想历史上的昏君一样，荒废了朝政。广开言路，逆耳忠言才是明君应有的表现。<br>比方说，当你听到与你不同的言论，不要先想着反驳对方，试着想想为什么对方会这样想？<br>每个人的想法都是其经历和体验的体现，没有相应的经历，很难会理解一些不一样的事情。这个时候不要着急去反驳对方，而是试着丰富自己的阅历。<br>之前说的2条“多读书、与优秀的人交朋友”都是丰富自己阅历的高效途径。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>希望大家作为一个成年人，拥有一个独立的三观，不要被推荐系统和自己的懒惰而奴役。</p>\n",
            "tags": [
                "tech"
            ]
        },
        {
            "id": "https://youngforest.github.io/2018/05/08/ssh-login-remote-server-without-password/",
            "url": "https://youngforest.github.io/2018/05/08/ssh-login-remote-server-without-password/",
            "title": "ssh免密登陆服务器",
            "date_published": "2018-05-08T10:47:09.000Z",
            "content_html": "<p>以下命令仅针对Unix-like系统。<br>Windows是不需要这样的解决方法的，Windows下很多类Putty工具都可以选择”记住密码”来实现免密登陆。<br>我在Mac上没有找到类似记住密码的解决方案，但使用Key事实上是更安全的一种方式。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"step1-生成rsa密钥对\"><a href=\"#step1-生成rsa密钥对\" class=\"headerlink\" title=\"step1: 生成rsa密钥对\"></a>step1: 生成rsa密钥对</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"step2-上传rsa公钥到服务器\"><a href=\"#step2-上传rsa公钥到服务器\" class=\"headerlink\" title=\"step2: 上传rsa公钥到服务器\"></a>step2: 上传rsa公钥到服务器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat id_rsa.pub | ssh -p 26757 root@138.128.193.150 <span class=\"string\">&#x27;cat &gt;&gt; .ssh/authorized_keys&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"step3-更改权限\"><a href=\"#step3-更改权限\" class=\"headerlink\" title=\"step3: 更改权限\"></a>step3: 更改权限</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -p 26757 root@138.128.193.150 <span class=\"string\">&quot;chmod 700 .ssh; chmod 640 .ssh/authorized_keys&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"step4-success\"><a href=\"#step4-success\" class=\"headerlink\" title=\"step4: success!\"></a>step4: success!</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -p 26757 root@138.128.193.150</span><br></pre></td></tr></table></figure>\n\n<p>reference:<br><a href=\"https://www.tecmint.com/ssh-passwordless-login-using-ssh-keygen-in-5-easy-steps/\">ssh-passwordless-login-using-ssh-keygen-in-5-easy-steps</a></p>\n",
            "tags": [
                "tech"
            ]
        },
        {
            "id": "https://youngforest.github.io/2018/05/07/Advanced-SQL-practice/",
            "url": "https://youngforest.github.io/2018/05/07/Advanced-SQL-practice/",
            "title": "SQL实践进阶",
            "date_published": "2018-05-07T15:30:25.000Z",
            "content_html": "<p>这一周在公司写了很多很长功能很复杂的sql语句，深感自己的数据库和SQL学的还只是皮毛，完全没法满足工程上的要求。<br>负责带我的二mentor对SQL比较也精通，对我有很多指导和建议。<br>没有对比就没有伤害，自己的菜和师兄的强让我知耻而后勇，有了进阶SQL的想法和行动。</p>\n<span id=\"more\"></span>\n<p>我被推荐的2份教程（感谢快手师兄和二mentor）：</p>\n<ul>\n<li>sql必知必会</li>\n<li><a href=\"http://www.runoob.com/sql/sql-constraints.html\">runoob</a></li>\n</ul>\n<p>其中《sql必知必会》我系统的看过一遍，runoob教程只是大致浏览一遍。<br>我认为只看一个教程就够了。<br>runoob的优点是可以在网站提供的线上数据库进行测试和练习，这一点和<a href=\"https://www.w3schools.com/sql/\">w3school的教程</a>有些像。<br>《sql必知必会》的优点是内容比较多，作者会传授一些写sql的经验，还会涉及到不同数据库的移植性和区别。</p>\n<p><a href=\"https://leetcode.com/problemset/database/\">leetcode上有42道Database的面试题目</a>，有时间一定要刷一刷。</p>\n<h1 id=\"实践中遇到的问题\"><a href=\"#实践中遇到的问题\" class=\"headerlink\" title=\"实践中遇到的问题\"></a>实践中遇到的问题</h1><p>由于我的岗位是推荐组的算法工程师，有大量的数据挖掘的需要。<br>而且写的不是纯sql，而是<a href=\"https://cwiki.apache.org/confluence/display/Hive/Home\">Hive</a>-sql。<br>Hive上存在很多限制和挑战，比如不能在select中嵌套select子句，<code>select 2 * (select 3);</code>就是不可以的（最后摸索出得解决方案是：使用聚集函数或列之间的可计算进行需要的计算，这就很考验<code>union</code>或<code>join</code>的灵活使用了。）；数据量特别大，每次查询很耗时（学会了用小的查询验证想法，从内到外层层验证，还有在‘jupyter notebook’上进行查询和计算）。</p>\n<h1 id=\"回答面试中的问题\"><a href=\"#回答面试中的问题\" class=\"headerlink\" title=\"回答面试中的问题\"></a>回答面试中的问题</h1><p>一面的小哥哥当时问我：你会SQL吗？</p>\n<p>我：会，而且我之前还有在数据库公司的实习经历。</p>\n<p>小哥哥：那你说说‘left join’，’right join’，’inner join’的区别。</p>\n<p>我：不知道…</p>\n<p>小哥哥：那你知道partition吗？</p>\n<p>我：这个我也不知道。</p>\n<p>小哥哥：你会的SQL仅限于上过的“数据库原理”和“课程设计”课吗？</p>\n<p>我：是的，而且因为一段时间不用有些生疏了。</p>\n<p>小哥哥就没再问SQL相关的内容了。</p>\n<p>经过一周的工作和SQL的重新系统学习，我现在可以回答这两个问题了。</p>\n<h3 id=\"‘left-join’，’right-join’，’inner-join’的区别\"><a href=\"#‘left-join’，’right-join’，’inner-join’的区别\" class=\"headerlink\" title=\"‘left join’，’right join’，’inner join’的区别\"></a>‘left join’，’right join’，’inner join’的区别</h3><p>‘inner join’即内联结，对于不匹配的项，不存在于联结结果中；’left join’，左外联结，如果左边的项在右边的表中没有匹配项，仍存在一条记录于联结结果中，此时右边表列均为NULL；’right join’，右联结与之类似。事实上，’left join’和’right join’可以互换，只是联结的左右两表也需要互换位置。</p>\n<h3 id=\"partition的概念\"><a href=\"#partition的概念\" class=\"headerlink\" title=\"partition的概念\"></a>partition的概念</h3><p>partion是为了加快查询速度，而将一个表分成不同的区。<br>限制是，select时，被partition的列必须写在where里作为filter。</p>\n",
            "tags": [
                "tech",
                "kuaishou"
            ]
        }
    ]
}